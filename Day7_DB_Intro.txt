===================DB flow=========================== : 
==> ORM ( Object relational mapping) : gives us an easy way to work with db & convert the data(db data like tables & rows) into classes and object & vice-versa.

==> JPA (jakarta persistance API) : auto generated queries + write your own queries

==> Spring data JPA <> Hibernate <> JDBC
|spring data JPA| 
	|
	|
    | JPA |(Interface)
	|
	| (implemented by ORMS)
|Hibernate   |  MyBatis|
  |
  |(talks to jdbc)
|JDBC |
  |
  |(implemented by)
|MySql driver | Postgres driver|



** we call jpa method -> they internally use hibernate to generate sql queiries -> execution of queries happen with jdbc

   |-> JPA(methods & annotation) --> Hibernate (query generation) --> JDBC (execution of queires in db)
   |-> jpa abstrcts hibernate -> hibernate abstracts jdbc

==> Repository(means storage) pattern 
  interaction with db (DAO : data access object) : Db related code is here
  controller -> services-> repository-> jpa -> hibernate -> jdbc -> my sql driver

 ** for understanding the difference b/w jdbc code , how hibernate easy then jdbc and how JPa easiest of them all see.
	https://github.com/sndpoffcl/ECOMProductService/tree/master/notes

=====> UUID 
Q) suppose there is one table User, having attributes email and name, now can i make email as primary key
ans - > yes we can, but it is worst idea to make a string attribute a primary key
    		|-> a) string comparision are there which are very unifficient
		|-> b) indexing is very difficult
	
Q) so can we make long id, autogenerated id as pk
   but when db is distrubuted, how do we ensure different different ids in different shards.( because id should be different in different shards not like in shard1 user1, user2 and again in shard2 user1, user2)

Q) can we take current timestamp as ok : no beause multiple user can insert at same time
Q) can we take current timestamp + ip address as pk: no because multiple people can be connected to same n/w hence at same time insertion will result in same pk

 intro to uuid : it is unquie number, generated using some crytptographic algo 
		Type 4 : uuid type 4 is generated randomly (unlike prev version whhich used ip adddress which was easily hacked )
		Type 7 : generated in binary 